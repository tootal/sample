#pragma once

#include <string>
#include <map>

enum class Token {
	AND=1,
	ARRAY,
	BEGIN,
	BOOL,
	CALL,
	CASE,
	CHAR,
	CONSTANT,
	DIM,
	DO,
	ELSE,
	END,
	FALSE,
	FOR,
	IF,
	INPUT,
	INTEGER,
	NOT,
	OF,
	OR,
	OUTPUT,
	PROCEDURE,
	PROGRAM,
	READ,
	REAL,
	REPEAT,
	SET,
	STOP,
	THEN,
	TO,
	TRUE,
	UNTIL,
	VAR,
	WHILE,
	WRITE,
	IDENTIFIER,
	NUMBER,
	LITERAL,
	LPAREN,
	RPAREN,
	ASTERISK,
	ASTERISKSLASH,
	PLUS,
	COMMA,
	MINUS,
	PERIOD,
	DOUBLEPERIOD,
	SLASH,
	SLASHASTERISK,
	COLON,
	ASSIGNMENT,
	SEMICOLON,
	LESS,
	LESSEQUAL,
	NOTEQUAL,
	EQUAL,
	GREATER,
	GREATEREQUAL,
	LBRACKET,
	RBRACKET
};

std::map<std::string, Token> TokenMap {
	{"and", Token::AND},
	{"array", Token::ARRAY},
	{"begin", Token::BEGIN},
	{"bool", Token::BOOL},
	{"call", Token::CALL},
	{"case", Token::CASE},
	{"char", Token::CHAR},
	{"constant", Token::CONSTANT},
	{"dim", Token::DIM},
	{"do", Token::DO},
	{"else", Token::ELSE},
	{"end", Token::END},
	{"false", Token::FALSE},
	{"for", Token::FOR},
	{"if", Token::IF},
	{"input", Token::INPUT},
	{"integer", Token::INTEGER},
	{"not", Token::NOT},
	{"of", Token::OF},
	{"or", Token::OR},
	{"output", Token::OUTPUT},
	{"procedure", Token::PROCEDURE},
	{"program", Token::PROGRAM},
	{"read", Token::READ},
	{"real", Token::REAL},
	{"repeat", Token::REPEAT},
	{"set", Token::SET},
	{"stop", Token::STOP},
	{"then", Token::THEN},
	{"to", Token::TO},
	{"true", Token::TRUE},
	{"until", Token::UNTIL},
	{"var", Token::VAR},
	{"while", Token::WHILE},
	{"write", Token::WRITE},
	{"(", Token::LPAREN},
	{")", Token::RPAREN},
	{"*", Token::ASTERISK},
	{"*/", Token::ASTERISKSLASH},
	{"+", Token::PLUS},
	{",", Token::COMMA},
	{"-", Token::MINUS},
	{".", Token::PERIOD},
	{"..", Token::DOUBLEPERIOD},
	{"/", Token::SLASH},
	{"/*", Token::SLASHASTERISK},
	{":", Token::COLON},
	{":=", Token::ASSIGNMENT},
	{";", Token::SEMICOLON},
	{"<", Token::LESS},
	{"<=", Token::LESSEQUAL},
	{"<>", Token::NOTEQUAL},
	{"=", Token::EQUAL},
	{">", Token::GREATER},
	{">=", Token::GREATEREQUAL},
	{"[", Token::LBRACKET},
	{"]", Token::RBRACKET}
};

Token getToken(std::string x) {
	// std::cerr << "getToken(" << x << ")\n";
	if (TokenMap.find(x) == TokenMap.end()) {
		return Token::IDENTIFIER;
	} else {
		return TokenMap[x];
	}
}
